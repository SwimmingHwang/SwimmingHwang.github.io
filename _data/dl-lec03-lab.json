{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"   \\n'2.1.0'   \\n\""
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.__version__   \n",
    "'''   \n",
    "\n",
    "'2.1.0'   \n",
    "\n",
    "'''   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab 3 Minimizing Cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = [1, 2, 3, 4]\n",
    "y_train = [0, -1, -2, -3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sequential 모델\n",
    "케라스에서는 **층(layer)을 조합해 모델(model)**을 만든다.   \n",
    "`model`은 (일반적으로) `layer`의 `graph`이다.   \n",
    "가장 흔한 모델 구조로는 층을 차례대로 쌓은 `tf.keras.Sequential` 모델이다.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `tf.keras.Sequential()` : 층을 쌓은 모델 구조   \n",
    "    Linear stack of layers.\n",
    "- `tf.model.add()` : 모델에 layer추가하기   \n",
    "    Adds a layer instance on top of the layer stack.\n",
    "- `units` : 양의 정수이며 출력 공간의 차원    \n",
    "    Positive integer, dimensionality of the output space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.model = tf.keras.Sequential()   \n",
    "# 1개의 유닛을 가진 완전 연결 layer을 모델에 추가   \n",
    "\n",
    "tf.model.add(tf.keras.layers.Dense(units=1,input_dim=1))   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train 준비\n",
    "모델을 구성한 후 `compile()`메서드를 호출하여 학습과정을 설정한다.   \n",
    "Configures the model for training.\n",
    "- `optimizer` : **훈련 과정을 설정**함 tf.keras.optimizers.Adam이나\n",
    "tf.keras.optimizers.SGD와 같은 tf.keras.optimizers 아래의 옵티마이저 객체를 전달함. 기본 매개변수를 사용할 경우 'adam'이나 'sgd'와 같이 문자열로 지정할 수도 있음. \n",
    "    - `SGD(Stochastic Gradient Descent)`는 배치 크기가 1인 경사하강법 알고리즘   \n",
    "        확률적 경사하강법은 데이터 세트에서 무작위로 균일하게 선택한 하나의 예를 의존하여 각 단계의 예측 경사를 계산한다.   \n",
    "        경사하강법에서 배치크기(batch-size) : 단일 반복에서 기울기를 계산하는 데 사용하는 데이터의 총 개수   \n",
    "- `loss` : **최적화 과정에서 최소화될 손실 함수(loss function)를 설정**함. 평균 제곱 오차(mse)와 categorical_crossentropy, binary_crossentropy 등이 자주 사용됨. 손실 함수의 이름을 지정하거나 tf.keras.losses 모듈의 호출 가능한 객체(loss function)를 전달할 수 있음.\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 옵티마이저로 SGD 확률적 경사하강법   \n",
    "\n",
    "# lr(learning-rate) 0.1 단위로 W와 cost를 계산함   \n",
    "\n",
    "sgd = tf.keras.optimizers.SGD(lr=0.1)   \n",
    "# loss function으로는 평균 제곱 오차 MSE로 설정함   \n",
    "\n",
    "tf.model.compile(optimizer=sgd, loss='mse')   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 1)                 2         \n",
      "=================================================================\n",
      "Total params: 2\n",
      "Trainable params: 2\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "tf.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train\n",
    "모델은 `fit()` 메서드를 통해서 훈련 데이터를 학습함. \n",
    "- `fit()` : fit()함수는 모델을 훈련시키고 훈련 과정을 보여준다.   \n",
    "    trains the model and returns history of train   \n",
    "- `epochs` 는 전체 데이터를 학습시킨 횟수를 의미한다.\n",
    "- `batch_size` : 넘파이 데이터를 전달하면 모델은 데이터를 작은 배치로 나누고 훈련 과정에서 이 배치를 순회함.    \n",
    "    이 정수 값은 배치의 크기를 지정함.    \n",
    "- 1 epoch : **모든 데이터 셋을 한 번 학습**  \n",
    "    1 iteration : **1회 학습**   \n",
    "    - 전체 데이터가 2000개 epochs=20, batch_size=500이면    \n",
    "        2000개의 데이터를 20번 학습시키는데 batch_size(500)로 쪼개어 학습을 시킴.   - 1 epoch은 각 데이터의 size가 500인 batch가 들어간 네 번의 iteration으로 나눠짐.  \n",
    "        iteration을 기준으로 총 80(20epochs * 4 iteration)번의 학습이 이루어짐. \n",
    "    - 메모리의 한계와 속도 저하 때문에 대부분의 경우 한 번의 에폭에서 모든 데이터를 한꺼번에 집어넣을 수는 없음\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 4 samples\n",
      "Epoch 1/100\n",
      "4/4 [==============================] - 0s 116ms/sample - loss: 5.9712\n",
      "Epoch 2/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.7247\n",
      "Epoch 3/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 1.2645\n",
      "Epoch 4/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.6065\n",
      "Epoch 5/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.3088\n",
      "Epoch 6/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.1729\n",
      "Epoch 7/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.1099\n",
      "Epoch 8/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0797\n",
      "Epoch 9/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0644\n",
      "Epoch 10/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0558\n",
      "Epoch 11/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0504\n",
      "Epoch 12/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0464\n",
      "Epoch 13/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0433\n",
      "Epoch 14/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0405\n",
      "Epoch 15/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0381\n",
      "Epoch 16/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0358\n",
      "Epoch 17/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0336\n",
      "Epoch 18/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0316\n",
      "Epoch 19/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0298\n",
      "Epoch 20/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0280\n",
      "Epoch 21/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0264\n",
      "Epoch 22/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0248\n",
      "Epoch 23/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0233\n",
      "Epoch 24/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0220\n",
      "Epoch 25/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0207\n",
      "Epoch 26/100\n",
      "4/4 [==============================] - 0s 4ms/sample - loss: 0.0195\n",
      "Epoch 27/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0183\n",
      "Epoch 28/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0172\n",
      "Epoch 29/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0162\n",
      "Epoch 30/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0153\n",
      "Epoch 31/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0144\n",
      "Epoch 32/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0135\n",
      "Epoch 33/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0127\n",
      "Epoch 34/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0120\n",
      "Epoch 35/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0113\n",
      "Epoch 36/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0106\n",
      "Epoch 37/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0100\n",
      "Epoch 38/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0094\n",
      "Epoch 39/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0088\n",
      "Epoch 40/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0083\n",
      "Epoch 41/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0078\n",
      "Epoch 42/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0074\n",
      "Epoch 43/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0069\n",
      "Epoch 44/100\n",
      "4/4 [==============================] - 0s 4ms/sample - loss: 0.0065\n",
      "Epoch 45/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0061\n",
      "Epoch 46/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0058\n",
      "Epoch 47/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0054\n",
      "Epoch 48/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0051\n",
      "Epoch 49/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0048\n",
      "Epoch 50/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0045\n",
      "Epoch 51/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0043\n",
      "Epoch 52/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0040\n",
      "Epoch 53/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0038\n",
      "Epoch 54/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0035\n",
      "Epoch 55/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0033\n",
      "Epoch 56/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0031\n",
      "Epoch 57/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0030\n",
      "Epoch 58/100\n",
      "4/4 [==============================] - 0s 3ms/sample - loss: 0.0028\n",
      "Epoch 59/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0026\n",
      "Epoch 60/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0025\n",
      "Epoch 61/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0023\n",
      "Epoch 62/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0022\n",
      "Epoch 63/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0021\n",
      "Epoch 64/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0019\n",
      "Epoch 65/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0018\n",
      "Epoch 66/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0017\n",
      "Epoch 67/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0016\n",
      "Epoch 68/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0015\n",
      "Epoch 69/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0014\n",
      "Epoch 70/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0013\n",
      "Epoch 71/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0013\n",
      "Epoch 72/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0012\n",
      "Epoch 73/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0011\n",
      "Epoch 74/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 0.0011\n",
      "Epoch 75/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 9.8933e-04\n",
      "Epoch 76/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 9.3098e-04\n",
      "Epoch 77/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 8.7606e-04\n",
      "Epoch 78/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 8.2439e-04\n",
      "Epoch 79/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 7.7577e-04\n",
      "Epoch 80/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 7.3001e-04\n",
      "Epoch 81/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 6.8695e-04\n",
      "Epoch 82/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 6.4644e-04\n",
      "Epoch 83/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 6.0831e-04\n",
      "Epoch 84/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 5.7243e-04\n",
      "Epoch 85/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 5.3867e-04\n",
      "Epoch 86/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 5.0690e-04\n",
      "Epoch 87/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 4.7700e-04\n",
      "Epoch 88/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 4.4886e-04\n",
      "Epoch 89/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 4.2239e-04\n",
      "Epoch 90/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 3.9748e-04\n",
      "Epoch 91/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 3.7403e-04\n",
      "Epoch 92/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 3.5197e-04\n",
      "Epoch 93/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 3.3121e-04\n",
      "Epoch 94/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 3.1168e-04\n",
      "Epoch 95/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.9329e-04\n",
      "Epoch 96/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.7599e-04\n",
      "Epoch 97/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.5971e-04\n",
      "Epoch 98/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.4440e-04\n",
      "Epoch 99/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.2998e-04\n",
      "Epoch 100/100\n",
      "4/4 [==============================] - 0s 2ms/sample - loss: 2.1642e-04\n"
     ]
    }
   ],
   "source": [
    "history = tf.model.fit(X_train, y_train, epochs=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 예측\n",
    "`tf.keras.Model.predict()` 메서드는 numpy array나 tf.data.Dataset을 사용할 수 있으며 주어진 데이터로 추론 모드에서 **마지막 layer의 출력을 예측하여 numpy array로 반환**함."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-4.740018 ],\n",
       "       [-3.7920144]], dtype=float32)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모델의 input으로 5와 4를 각각 넣음   \n",
    "\n",
    "y_predict = tf.model.predict(np.array([5, 4]))   \n",
    "# 5를 넣으면 -4, 4를 넣으면 -3 을 예측함   \n",
    "\n",
    "y_predict   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot training & validation loss values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 출처\n",
    "[tensorflow.blog](https://tensorflow.blog/2019/03/06/tensorflow-2-0-keras-api-overview/)   \n",
    "[SGD 개념](https://everyday-deeplearning.tistory.com/entry/SGD-Stochastic-Gradient-Descent-%ED%99%95%EB%A5%A0%EC%A0%81-%EA%B2%BD%EC%82%AC%ED%95%98%EA%B0%95%EB%B2%95)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Tensorflow-CPU",
   "language": "python",
   "name": "tf"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
